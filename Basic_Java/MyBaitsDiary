MyBaits 作用：接收输入参数 输出结果类型
SqlSessionFactory-->
SqlSession（操作数据库：CRUD，线程不安全，最佳应用场景在方法体内）--->
Executor（SqlSession内部通过执行器操作数据库，一个接口，基本执行器和缓存执行器）--->
Mapped Statement（MyBaits底层封装的对象：sql封装、参数、输出结果类型）--->
DB

输入类型：简单类型，HashMap、POJO
输出类型：简单类型，HashMap、POJO

基于代理DAO的CRUD操作

一级缓存：使用sqlSession以Map的形式缓存查询结果，当sqlSession修改、添加、删除、关闭等操作，缓存被清空
二级缓存：使用sqlSessionFactory以数据的形式缓存查询结果，需要多个地方开启支持二级缓存才能生效


mybatis自动生成插件，加入pom
 <plugin>
                <groupId>org.mybatis.generator</groupId>
                <artifactId>mybatis-generator-maven-plugin</artifactId>
                <version>1.3.7</version>

                <configuration>
                    <verbose>true</verbose>
                    <overwrite>true</overwrite>
                </configuration>
            </plugin>
			
jdbc.properties配置文件内容			
#驱动名字
driver=com.mysql.cj.jdbc.Driver
#数据库地址
url=jdbc:mysql://192.168.99.100:3306/lxl_spring
#数据库用户名
username=root
#数据库密码
password=123456
#win下驱动jar包的位置，mybatis自动生成插件需要使用
driver_path=C:\\Users\\DELL\\.m2\\repository\\mysql\\mysql-connector-java\\8.0.15\\mysql-connector-java-8.0.15.jar

resourcexia的generatorConfiguration。xml
引入配置文件
 <properties resource="jdbc.properties"/>
 //驱动jar包位置
 <classPathEntry location="${driver_path}"/>
	//数据库连接
<jdbcConnection driverClass="${driver}"
				connectionURL="${url}"
				userId="${username}"
				password="${password}"/>
				
				
				
<!--不同数据库sqlStatement不一样，https://www.jianshu.com/p/e09d2370b796-->
<table tableName="t_coffee" domainObjectName="Coffee" >
	<generatedKey column="id" sqlStatement="SELECT LAST_INSERT_ID()" identity="true" />
	<columnOverride column="price" javaType="org.joda.money.Money" jdbcType="BIGINT"
					typeHandler="com.example.mybatis.hellobatis.handler.MoneyTypeHandler"/>
</table>
				
保证mysql数据库有对应的表
使用mvn mybatis-generator:generate命令自动生成需要的文件

如果不使用插件，使用运行下面的程序
private void generateArtifacts() throws Exception {
		List<String> warnings = new ArrayList<>();
		ConfigurationParser cp = new ConfigurationParser(warnings);
		Configuration config = cp.parseConfiguration(
				this.getClass().getResourceAsStream("/generatorConfig.xml"));
		DefaultShellCallback callback = new DefaultShellCallback(true);
		MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings);
		myBatisGenerator.generate(null);
	}

在mvn中使用本地jar包	https://www.jianshu.com/p/cef1bc65584d
mvn install:install-file -Dfile=E:\jna-4.4.0.jar -DgroupId=jna -DartifactId=jna-java -Dversion=4.4.0 -Dpackaging=jar